trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
  - repository: VulnerableWebApp
    type: github
    endpoint: metalstormbass
    name: metalstormbass/VulnerableWebApp

stages:
  - stage: 
    jobs:
    
    - job: Security_Scans  
      steps:
        - checkout: VulnerableWebApp
        - checkout: self
        - bash: |
              ls VulnerableWebApp/
              #This makes the ShiftLeft Binary executable
              chmod +x Shiftleft_AzureDevOps/shiftleft

              #Run ShiftLeft and Check the code against Rule 201981 (Which I defined in Cloudguard CSPM)
              Shiftleft_AzureDevOps/shiftleft iac-assessment -r 201981 --path Shiftleft_AzureDevOps/
              
              #Run ShiftLeft against the VulnerableWebApp project
              Shiftleft_AzureDevOps/shiftleft code-scan -s VulnerableWebApp/
              
              #Download the docker image used in the project and scan with Shift Left
              docker pull michaelbraunbass/testbadapp:main
              docker save michaelbraunbass/testbadapp:main -o bad_app.tar
              Shiftleft_AzureDevOps/shiftleft image-scan --timeout 1800 --image ./bad_app.tar
          env:
           CHKP_CLOUDGUARD_ID: $(CHKP_CLOUDGUARD_ID)
           CHKP_CLOUDGUARD_SECRET: $(CHKP_CLOUDGUARD_SECRET)

          continueOnError: True
        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: 'VulnerableWebApp/'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: 'VulnerableWebApp.zip'
            replaceExistingArchive: true
            verbose: true
        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: './VulnerableWebApp.zip'
            artifact: 'VulnerableWebApp'
            publishLocation: 'pipeline'

    - job:  Terraform_Plan    
      dependsOn: Terraform_Security_Scan
      steps:
      
       - task: TerraformInstaller@0
         inputs:
          terraformVersion: '0.13.3'
      
       - bash: |
                
                sed -i "/token/c\   token\ = \"$TERRAFORM_API_KEY\"" main.tf                            
                sed -i "/organization/c\   organization\ = \"$TF_ORGANIZATION\"" main.tf 
                sed -i "/name/c\   name\ = \"$TF_WORKSPACE\"" main.tf 
                terraform init
                terraform plan
                rm -r ./.terraform
                
         env: 
          TERRAFORM_API_KEY: $(TERRAFORM_API_KEY)
      
       - task: ArchiveFiles@2
         inputs:
            rootFolderOrFile: './'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: './VulnerableAzure.zip'
            replaceExistingArchive: true
       - task: PublishPipelineArtifact@1
         inputs:
            targetPath: './VulnerableAzure.zip'
            artifact: 'VulnerableAzure'
            publishLocation: 'pipeline'